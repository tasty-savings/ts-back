package com.example.testysavingsbe.domain.recipe.service;

import com.example.testysavingsbe.domain.recipe.dto.response.RecipeResponse;
import com.example.testysavingsbe.domain.recipe.entity.Recipe;
import com.example.testysavingsbe.domain.recipe.repository.RecipeRepository;
import com.example.testysavingsbe.domain.recipe.service.usecase.RecipeCommandUseCase;
import com.example.testysavingsbe.domain.recipe.service.usecase.RecipeQueryUseCase;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
@RequiredArgsConstructor
public class RecipeService implements RecipeQueryUseCase, RecipeCommandUseCase {
    private final RecipeRepository recipeRepository;

    @Override
    public RecipeResponse generateRecipe(RecipeGenerateServiceRequest request) {
        String recipeValue = generateRecipeByAI(request.recipeName());
        Recipe recipe = Recipe.builder()
                .user(request.user())
                .content(recipeValue)
                .build();
        recipeRepository.save(recipe);

        return new RecipeResponse(
                recipe.getContent(),
                recipe.getIsEaten(),
                recipe.getIsBookMarked(),
                recipe.getUser().getUsername());
    }

    @Override
    public RecipeResponse checkEatRecipe(RecipeUpdateServiceRequest request) {
        Recipe recipe = recipeRepository.findById(request.recipeId())
                .orElseThrow(() -> new EntityNotFoundException("존재하지 않는 레시피입니다."));
        recipe.updateEaten();

        return new RecipeResponse(
                recipe.getContent(),
                recipe.getIsEaten(),
                recipe.getIsBookMarked(),
                recipe.getUser().getUsername()
        );
    }

    @Override
    public RecipeResponse bookmarkRecipe(RecipeUpdateServiceRequest request) {
        Recipe recipe = recipeRepository.findById(request.recipeId())
                .orElseThrow(() -> new EntityNotFoundException("존재하지 않는 레시피입니다."));
        recipe.updateBookMarked();

        return new RecipeResponse(
                recipe.getContent(),
                recipe.getIsEaten(),
                recipe.getIsBookMarked(),
                recipe.getUser().getUsername()
        );
    }


    // TODO AI 모델 완성시 연결
    private String generateRecipeByAI(String recipeName) {
        return "Recipe Name: " + recipeName + "\n" + "This recipe generated by AI model";
    }
}
